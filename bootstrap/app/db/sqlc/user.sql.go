// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email, password_hash, first_name, last_name, created_at, updated_at
) VALUES (
    ?1, ?2, ?3, ?4, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
)
RETURNING id, email, password_hash, first_name, last_name, email_verified_at, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Email        string
	PasswordHash string
	FirstName    string
	LastName     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.EmailVerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, password_hash, first_name, last_name, email_verified_at, created_at, updated_at, deleted_at FROM users WHERE email = ?1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.EmailVerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, email, password_hash, first_name, last_name, email_verified_at, created_at, updated_at, deleted_at FROM users WHERE id = ?1
`

func (q *Queries) FindUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.EmailVerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUserEmailVerifiedAt = `-- name: UpdateUserEmailVerifiedAt :exec
UPDATE users SET email_verified_at = CURRENT_TIMESTAMP WHERE id = ?1
`

func (q *Queries) UpdateUserEmailVerifiedAt(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateUserEmailVerifiedAt, id)
	return err
}

const updateUserFirstLastName = `-- name: UpdateUserFirstLastName :exec
UPDATE users SET first_name = ?1, last_name = ?2 WHERE id = ?3
`

type UpdateUserFirstLastNameParams struct {
	FirstName string
	LastName  string
	ID        int64
}

func (q *Queries) UpdateUserFirstLastName(ctx context.Context, arg UpdateUserFirstLastNameParams) error {
	_, err := q.db.ExecContext(ctx, updateUserFirstLastName, arg.FirstName, arg.LastName, arg.ID)
	return err
}
